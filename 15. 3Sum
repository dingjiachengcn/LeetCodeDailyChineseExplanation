Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
 

Constraints:

3 <= nums.length <= 3000
-105 <= nums[i] <= 105

题目：

给定一个整数数组 nums，返回所有满足以下条件的三元组 [nums[i], nums[j], nums[k]]：i != j，i != k，j != k，并且 nums[i] + nums[j] + nums[k] == 0。

注意，解集不能包含重复的三元组。

示例 1:

输入：nums = [-1,0,1,2,-1,-4]
输出：[[-1,-1,2],[-1,0,1]]
解释：
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
独特的三元组分别是 [-1,0,1] 和 [-1,-1,2]。
注意，输出和三元组的顺序并不重要。

示例 2：

输入：nums = [0,1,1]
输出：[]
解释：唯一可能的三元组并不满足相加等于0的条件。

示例 3：

输入：nums = [0,0,0]
输出：[[0,0,0]]
解释：唯一可能的三元组相加等于0。

约束：

3 <= nums.length <= 3000
-105 <= nums[i] <= 105

class Solution {
    public List<List<Integer>> threeSum(int[] num) {
       
         // 创建一个 List 用于存储满足条件的三元组
         List<List<Integer>> list = new ArrayList<>();  

         // 如果数组长度小于3，返回空列表
         if (num.length < 3) {
             return list;
         }

         // 对数组进行排序
         Arrays.sort(num);

         // 遍历数组，直到倒数第二个元素
        for (int i = 0; i < num.length - 2; i++) {

            // 如果 i 等于 0，或者当前元素与前一个元素不相等（跳过重复元素）
            if (i == 0 || (i > 0 && num[i] != num[i - 1])) {

                // 初始化左指针 lo，右指针 hi，以及需要查找的和 sum
                int lo = i + 1, hi = num.length - 1, sum = 0 - num[i];

                // 当左指针小于右指针时，继续查找
                while (lo < hi) {
                    // 如果左指针和右指针的元素和等于 sum
                    if (num[lo] + num[hi] == sum) {
                       // 添加满足条件的三元组到结果列表中
                       list.add(Arrays.asList(num[i], num[lo], num[hi]));

                       // 跳过左指针重复的元素
                        while (lo < hi && num[lo] == num[lo + 1]) lo++;
                       // 跳过右指针重复的元素
                        while (lo < hi && num[hi] == num[hi - 1]) hi--;

                       // 左指针向右移动一位
                        lo++;
                       // 右指针向左移动一位
                        hi--;
                    } else if (num[lo] + num[hi] < sum) { // 如果左指针和右指针的元素和小于 sum
                        lo++; // 左指针向右移动一位
                    } else { // 如果左指针和右指针的元素和大于 sum
                        hi--; // 右指针向左移动一位
                    }
                }
            }
        }
        // 返回结果列表
        return list;
    }
}


some solutions:

https://leetcode.com/problems/3sum/solutions/2676313/java-binary-search-two-pointers-hashmap-5-solutions/?languageTags=java
