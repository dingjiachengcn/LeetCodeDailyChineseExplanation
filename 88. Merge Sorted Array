You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].
Example 3:

Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.
 

Constraints:

nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-109 <= nums1[i], nums2[j] <= 109
 

Follow up: Can you come up with an algorithm that runs in O(m + n) time?

题目翻译：

给定两个整数数组 nums1 和 nums2，它们都是非递减排序的，以及两个整数 m 和 n，分别表示 nums1 和 nums2 中的元素个数。

将 nums1 和 nums2 合并成一个非递减排序的单一数组。

函数不应返回最终排序的数组，而是将其存储在数组 nums1 中。为了适应这个需求，nums1 的长度为 m + n，其中前 m 个元素表示应该合并的元素，后 n 个元素被设置为 0，应该忽略。nums2 的长度为 n。

示例：

示例 1：

输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
输出：[1,2,2,3,5,6]
解释：我们要合并的数组是 [1,2,3] 和 [2,5,6]。
合并后的结果是 [1,2,2,3,5,6]，其中加下划线的元素来自 nums1。
示例 2：

输入：nums1 = [1], m = 1, nums2 = [], n = 0
输出：[1]
解释：我们要合并的数组是 [1] 和 []。
合并后的结果是 [1]。
示例 3：

输入：nums1 = [0], m = 0, nums2 = [1], n = 1
输出：[1]
解释：我们要合并的数组是 [] 和 [1]。
合并后的结果是 [1]。
请注意，因为 m = 0，所以 nums1 中没有元素。0 只是为了确保合并结果可以放入 nums1。

约束条件：

nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-109 <= nums1[i], nums2[j] <= 109

追加问题：你能想出一个时间复杂度为 O(m + n) 的算法吗？

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        // 创建一个新的数组，长度为 m+n
        int[] arr = new int[n + m];
        // 初始化三个指针 i, j, k 分别表示 nums1, nums2, arr 的当前位置
        int i = 0, j = 0, k = 0;
        // 当 i 和 j 都没有遍历完时，进行循环
        while (i < m && j < n) {
            // 如果 nums1 的当前元素小于等于 nums2 的当前元素
            if (nums1[i] <= nums2[j]) {
                // 将 nums1 的当前元素放入 arr，并将 i 和 k 分别加 1
                arr[k++] = nums1[i++];
            } else if (nums1[i] > nums2[j]) {
                // 否则，将 nums2 的当前元素放入 arr，并将 j 和 k 分别加 1
                arr[k++] = nums2[j++];
            }
        }
        // 当 nums1 还有剩余元素时
        while (i < m) {
            // 将剩余元素放入 arr，并将 i 和 k 分别加 1
            arr[k++] = nums1[i++];
        }
        // 当 nums2 还有剩余元素时
        while (j < n) {
            // 将剩余元素放入 arr，并将 j 和 k 分别加 1
            arr[k++] = nums2[j++];
        }
        // 遍历新数组 arr
        for (int a = 0; a < arr.length; a++) {
            // 将新数组 arr 的元素复制到 nums1 中，完成合并操作
            nums1[a] = arr[a];
        }
    }
}

这段代码的逻辑是：创建一个新的数组，长度为 m+n，然后使用三个指针 i、j、k 分别遍历 nums1、nums2 和新数组 arr。将较小的元素从 nums1 和 nums2 中取出并放入新数组 arr 中，遍历完 nums1 和 nums2 后，将新数组 arr 的元素复制到 nums1 中，完成合并操作。

