There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.

Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique

 

Example 1:

Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
Output: 3
Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.
Example 2:

Input: gas = [2,3,4], cost = [3,4,3]
Output: -1
Explanation:
You can't start at station 0 or 1, as there is not enough gas to travel to the next station.
Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 0. Your tank = 4 - 3 + 2 = 3
Travel to station 1. Your tank = 3 - 3 + 3 = 3
You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.
Therefore, you can't travel around the circuit once no matter where you start.
 

Constraints:

n == gas.length == cost.length
1 <= n <= 105
0 <= gas[i], cost[i] <= 104

题目翻译：在一个环形路线上有n个加油站，第i个加油站的汽油量是gas[i]。你有一辆油箱无限大的汽车，从第i个加油站到下一个(i+1)个加油站需要消耗cost[i]的汽油。你从某个加油站开始，汽车油箱为空。给定两个整数数组gas和cost，如果你能顺时针方向绕一圈返回出发的加油站索引，否则返回-1。如果存在解决方案，保证它是唯一的。




class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int totalGas = 0; // 初始化总的汽油量为0
        int totalCost = 0; // 初始化总的消耗量为0
        int start = 0; // 初始化起始加油站索引为0
        int tank = 0; // 初始化汽车油箱为0

        for (int i = 0; i < gas.length; i++) {
            totalGas += gas[i]; // 计算总的汽油量
            totalCost += cost[i]; // 计算总的消耗量
            tank += gas[i] - cost[i]; // 当前油箱中的汽油量

            if (tank < 0) { // 如果油箱中的汽油不足以到达下一个加油站
                start = i + 1; // 尝试下一个加油站作为起始点
                tank = 0; // 油箱重新置空
            }
        }

        // 如果总的汽油量大于等于总的消耗量，说明可以绕一圈，返回起始加油站索引；否则返回-1
        return totalGas >= totalCost ? start : -1;
    }
}

这个算法题的关键在于寻找一个合适的起始加油站，使得汽车能够绕环形路线行驶一圈。我们可以通过一次遍历来解决这个问题。

算法思路如下：

初始化四个变量：总的汽油量totalGas、总的消耗量totalCost、起始加油站索引start和汽车油箱中的汽油量tank。
遍历gas和cost数组，分别计算总的汽油量和总的消耗量。同时，更新汽车油箱中的汽油量（当前油箱中的汽油量加上本站的汽油量减去从本站到下一站的消耗量）。
在遍历过程中，如果发现汽车油箱中的汽油量不足以到达下一个加油站，说明当前加油站不适合作为起始点。此时，我们将起始加油站索引更新为下一个加油站，并将汽车油箱置空，然后继续遍历。
遍历完成后，我们需要判断总的汽油量是否大于等于总的消耗量。如果大于等于，说明存在一个合适的起始加油站，此时返回之前更新过的起始加油站索引；否则，返回-1，表示无法绕环形路线行驶一圈。
这个算法只需遍历一次gas和cost数组，时间复杂度为O(n)，其中n为加油站的数量。
