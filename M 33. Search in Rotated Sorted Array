There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 

Constraints:

1 <= nums.length <= 5000
-10^4 <= nums[i] <= 10^4
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-10^4 <= target <= 10^4

这个题目给出了一个以升序排列的整数数组 nums（数组的所有值都是唯一的）。在传递给你的函数之前，nums 可能在一个未知的轴心索引 k（1 <= k < nums.length）处旋转，这样生成的数组是 [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]（从0开始索引）。例如，[0,1,2,4,5,6,7] 可能在轴心索引 3 处旋转，变成 [4,5,6,7,0,1,2]。

给定数组 nums 可能经过旋转后的结果以及一个整数 target，如果 target 在 nums 中，则返回 target 的索引；如果它不在 nums 中，则返回 -1。

你必须写一个运行时间复杂度为 O(log n) 的算法。

题目例子：

示例 1：

输入：nums = [4,5,6,7,0,1,2], target = 0
输出：4
解释：目标值 0 在数组中的位置是索引 4，所以返回 4。

示例 2：

输入：nums = [4,5,6,7,0,1,2], target = 3
输出：-1
解释：目标值 3 不在数组中，所以返回 -1。

示例 3：

输入：nums = [1], target = 0
输出：-1
解释：目标值 0 不在数组中，所以返回 -1。

限制条件：

1 <= nums.length <= 5000
-10^4 <= nums[i] <= 10^4
nums 中所有值都是唯一的。
nums 是一个可能旋转的升序数组。
-10^4 <= target <= 10^4


best answer:
class Solution {
    public int search(int[] nums, int target) {
        // 确定数组的起始和结束位置
        int start = 0, end = nums.length - 1;
        // 当起始位置小于等于结束位置时进行循环
        while (start <= end) {
            // 找到中间位置
            int mid = start + (end - start) / 2;
            // 如果中间位置的元素就是目标元素，直接返回中间位置
            if (nums[mid] == target) return mid;
            // 如果中间位置的元素大于起始位置的元素，说明前半段是有序的
            if (nums[mid] >= nums[start]) {
                // 如果目标元素在前半段的范围内，就在前半段查找
                if (target >= nums[start] && target < nums[mid]) end = mid - 1;
                // 否则在后半段查找
                else start = mid + 1;
            }
            // 如果中间位置的元素小于起始位置的元素，说明后半段是有序的
            else {
                // 如果目标元素在后半段的范围内，就在后半段查找
                if (target <= nums[end] && target > nums[mid]) start = mid + 1;
                // 否则在前半段查找
                else end = mid - 1;
            }
        }
        // 如果数组中不存在目标元素，返回-1
        return -1;
    }
}

这是一道二分搜索的变形题目，因为数组在某个点进行了旋转，所以我们无法直接进行常规的二分搜索。我们需要找到旋转的点，
